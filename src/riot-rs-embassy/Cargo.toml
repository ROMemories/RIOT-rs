[package]
name = "riot-rs-embassy"
version = "0.1.0"
license.workspace = true
edition = "2021"

[lints]
workspace = true

[dependencies]
critical-section.workspace = true
linkme.workspace = true
static_cell.workspace = true
cfg-if.workspace = true

embassy-executor = { workspace = true, features = ["nightly"] }

embassy-hal-internal = { workspace = true }
embassy-net = { workspace = true, optional = true, features = [
  "dhcpv4",
  "medium-ethernet",
] }
embassy-net-driver-channel = { workspace = true, optional = true }
embassy-sync = { workspace = true }
embassy-time = { workspace = true, optional = true }
embassy-usb = { workspace = true, optional = true }

embedded-hal = { workspace = true }
embedded-hal-async = { workspace = true }

riot-rs-threads = { path = "../riot-rs-threads", optional = true }
riot-rs-debug = { workspace = true }
riot-rs-macros = { path = "../riot-rs-macros" }
riot-rs-rt = { path = "../riot-rs-rt" }
riot-rs-shared-types = { path = "../riot-rs-shared-types" }
riot-rs-utils = { workspace = true }

heapless = "0.8.0"
once_cell = { version = "1.19.0", default-features = false, features = [
  "critical-section",
] }

# listed here for conditional feature selection
esp-hal = { workspace = true, default-features = false, optional = true }
esp-hal-embassy = { workspace = true, default-features = false, optional = true }
esp-wifi = { workspace = true, optional = true }

[target.'cfg(context = "cortex-m")'.dependencies]
embassy-executor = { workspace = true, default-features = false, features = [
  "arch-cortex-m",
] }

[target.'cfg(context = "nrf")'.dependencies]
riot-rs-nrf = { path = "../riot-rs-nrf" }

[target.'cfg(context = "rp")'.dependencies]
riot-rs-rp = { path = "../riot-rs-rp" }

[target.'cfg(context = "esp")'.dependencies]
esp-hal = { workspace = true, features = ["async", "embedded-hal"] }
esp-hal-embassy = { workspace = true, default-features = false, features = [
  "time-timg0",
] }
esp-wifi = { workspace = true, default-features = false, features = [
  "async",
  "embassy-net",
  "wifi",
], optional = true }

[target.'cfg(context = "esp32c3")'.dependencies]
esp-hal = { workspace = true, features = ["esp32c3"] }
esp-hal-embassy = { workspace = true, default-features = false, features = [
  "esp32c3",
] }
esp-wifi = { workspace = true, default-features = false, features = [
  "esp32c3",
], optional = true }

[target.'cfg(context = "esp32c6")'.dependencies]
esp-hal = { workspace = true, features = ["esp32c6"] }
esp-hal-embassy = { workspace = true, default-features = false, features = [
  "esp32c6",
] }
esp-wifi = { workspace = true, default-features = false, features = [
  "esp32c6",
], optional = true }

[target.'cfg(context = "stm32")'.dependencies]
riot-rs-stm32 = { path = "../riot-rs-stm32" }

[features]
## Enables GPIO interrupt support.
external-interrupts = [
  "riot-rs-nrf/external-interrupts",
  "riot-rs-rp/external-interrupts",
  "riot-rs-stm32/external-interrupts",
  "riot-rs-shared-types/external-interrupts",
]
time = ["dep:embassy-time", "embassy-executor/integrated-timers"]
usb = [
  "dep:embassy-usb",
  "riot-rs-nrf/usb",
  "riot-rs-rp/usb",
  "riot-rs-stm32/usb",
]
# embassy-net requires embassy-time and support for timeouts in the executor
net = ["dep:embassy-net", "time"]
usb-ethernet = ["usb", "net"]
## Use a hardware RNG to seed into the riot-rs-random system-wide RNG
hwrng = ["riot-rs-nrf/hwrng"]

wifi = []
wifi-cyw43 = ["riot-rs-rp/wifi-cyw43", "net", "wifi"]
wifi-esp = ["dep:esp-wifi", "dep:embassy-net-driver-channel", "net", "wifi"]

threading = ["dep:riot-rs-threads"]
override-network-config = []
override-usb-config = []

executor-single-thread = [
  "riot-rs-rt/executor-single-thread",
  "esp-hal-embassy?/executors",
  "riot-rs-nrf/executor-single-thread",
  "riot-rs-rp/executor-single-thread",
]
executor-interrupt = [
  # "embassy-executor/executor-interrupt", # FIXME: remove this one when all architectures are extracted
  "riot-rs-nrf/executor-interrupt",
  "riot-rs-rp/executor-interrupt",
]
executor-thread = ["threading", "riot-rs-nrf/executor-thread"]
executor-none = ["riot-rs-nrf/executor-none"]

defmt = [
  "embassy-net?/defmt",
  "riot-rs-nrf/defmt",
  "riot-rs-stm32/defmt",
  "embassy-time?/defmt",
  "embassy-usb?/defmt",
  "esp-wifi?/defmt",
  "riot-rs-rp/defmt",
]

# These are chosen automatically by riot-rs-boards and select the correct stm32
# usb peripheral support.
stm32-usb = ["riot-rs-stm32/stm32-usb"]
stm32-usb-synopsis = ["riot-rs-stm32/stm32-usb-synopsis"]
